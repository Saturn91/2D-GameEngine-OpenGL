#version 400 core

in vec2 pass_textureCoords; //same name as the out in vertexShader!!
in vec3 pass_position;

out vec4 out_Colour;

uniform sampler2D textureSampler;	//is per default on Texture 0 -> see also renderer 
uniform vec3 enviromentLight;
uniform vec2 cameraLightPosition;
uniform vec3 cameraLightColor;
uniform float cameraLightStrenght;
uniform float cameraLightrange;

//screen Informations
uniform float screenFormat;

void main(void){
	//calculate Distance
	
	float distanceX = cameraLightPosition.x - pass_position.x;
	float distanceY = (cameraLightPosition.y - pass_position.y) * screenFormat;
	vec2 distance = vec2(distanceX, distanceY);
	
	float distanceXY = length(distance);
	
	//calculate light
	vec3 pointLightResult;
	pointLightResult = cameraLightColor * (1/(distanceXY-0.01)-1/(cameraLightrange)) * cameraLightStrenght;
	
	if(pointLightResult.x < 0){
		pointLightResult.x = 0;
		pointLightResult.y = 0;
		pointLightResult.z = 0;
	}
	
	if(distanceXY < 0.01){
		pointLightResult = cameraLightColor*10;
	}
	vec4 light_4f;
	light_4f.x = enviromentLight.x + pointLightResult.x;
	light_4f.y = enviromentLight.y + pointLightResult.y;
	light_4f.z = enviromentLight.z + pointLightResult.z;
	
	//calculate pixel color on screen
	out_Colour = texture(textureSampler, pass_textureCoords)*light_4f;

}